/***  Plugin which renders the YouTube channel videos list to the page*  @author:  H. Yankov (hristo.yankov at gmail dot com)*  @version: 1.0.0 (Nov/27/2009)*    http://yankov.us*  *  Modified by Dan Hounshell (Jan/2010) to work for favorites or *  uploads feeds and simplified output *  http://danhounshell.com/blog/add-a-youtube-widget-to-any-web-site-with-jquery/**  Updated by Jacob Rogaishio (2013-02-14) to include description, viewcount, stars, ratings*  and p elements with classes. Also included comments of pre-existing code*  JacobRogaishio.com**/var __mainDiv;var __containerDiv;var __preLoaderHTML;var __opts;function __jQueryYouTubeChannelReceiveData(data) {    var cnt = 0;	var headerInfo;	headerInfo = '<div class="youTubeHeader">';	headerInfo +='<div class="youTubeUserInfo"><p id="youTubeName">' + __opts.userName + '</p><p id="youTubeChannel">' + __opts.channel + '</p></div>';	headerInfo += '</div>';	__mainDiv.append(headerInfo);	    $.each(data.feed.entry, function(i, e) {        if (cnt < __opts.numberToDisplay) {			var parts = e.id.$t.split('/');			var videoId = parts[parts.length-1];			//Output variable			//Wrap each video in a video div			var out = '<div class="video">';						if(__opts.numberToDisplay == 1) 				out += '<div class="youTubeContent" id="youTubeContent_Single">';			else if(cnt == 0) 				out += '<div class="youTubeContent" id="youTubeContent_First">';			else if(cnt == __opts.numberToDisplay-1)				out += '<div class="youTubeContent" id="youTubeContent_Last">';			else				out += '<div class="youTubeContent">';						if(__opts.titleAboveImage) {								out += '<h1 class="youTubeTitle"><a href="' + e.link[0].href + '" id="youTubeTitleLink">' + e.title.$t + '</a></h1>';												out += '<p class="youTubeImage"><a href="' + e.link[0].href + '"><img src="http://i.ytimg.com/vi/' + videoId + '/' + __opts.imageSize + '.jpg" id="youTubeImg" /></a></p>';			}			else {				out += '<p class="youTubeImage"><a href="' + e.link[0].href + '"><img src="http://i.ytimg.com/vi/' + videoId + '/' + __opts.imageSize + '.jpg" id="youTubeImg"/></a></p>';				out += '<h1 class="youTubeTitle"><a href="' + e.link[0].href + '" id="youTubeTitleLink">' + e.title.$t + '</a></h1>';			}									//Grab the content data for processing and formatting			var contentData = e.content.$t;			var dataArr = contentData.split("<div");			//Trim off the first element since split will add an extra			dataArr.shift();			//Remove all pre-defined styles. We can set these later through p elements			for (var i=0; i<dataArr.length; i++){				//remove the DIV's, and put in P elements instead				var temp = dataArr[i];				var replaceStr;								//Remove the top and bottom div				replaceStr = temp.substr(0,(temp.indexOf(">")+1));				temp = temp.replace(replaceStr,"");				temp = temp.replace("</div>","");				dataArr[i] = temp;			}			//Larger Video IMG (requires both array elements. Not properly formatted			//out += dataArr[0];			//out += out + dataArr[1];						//Title / Link div @  dataArr[2];						//Description			if (__opts.description) out += '<p class="youTubeDesc">' + dataArr[3] + '</p>';						//Author in content @ dataArr[4];						//ViewCount			if (__opts.viewCount) out += '<p class="youTubeViewCount">' + dataArr[5] + '</p>';						//Stars!?!? Why is this even in the content!?!			if (__opts.stars) out += '<p class="youTubeStars">' + dataArr[6] + '</p>';						//Ratings and time			if (__opts.time) out += '<p class="youTubeRatingTime">' + dataArr[7] + '</p>';						//Author			if (__opts.showAuthor) out += '<p class="youTubeAuthor">' + 'By: ' + e.author[0].name.$t + '</p>';            			//published Date			if (__opts.publishDate) {				var pubDate = new Date(e.published.$t);				var day,month;				if(pubDate.getDate()+1 > 9) day = pubDate.getDate();				else day = "0" + pubDate.getDate();								if(pubDate.getMonth()+1 > 9) month = (pubDate.getMonth()+1);				else month = "0" + (pubDate.getMonth()+1);								var formattedDate = "Invalid Date Format!";				//Format the date per the users settings				switch(__opts.dateFormat) {					case "mm/dd/yyyy":						formattedDate = (month + "/" + day + "/" + pubDate.getFullYear());						break					case "mm/dd/yy":						formattedDate = (month + "/" + day + "/" + (pubDate.getFullYear()).toString().substr(2,3));						break					case "dd/mm/yyyy":						formattedDate = (day + "/" + month + "/" + pubDate.getFullYear());						break					case "dd/mm/yy":						formattedDate = (day + "/" + month + "/" + (pubDate.getFullYear()).toString().substr(2,3));						break;					case "yyyy-mm-dd":						formattedDate = (pubDate.getFullYear() + "-" + month + "-" + day);						break;				}								out += '<p class="youTubePubDate">Published: ' + formattedDate +'</p>';			}			if(cnt != __opts.numberToDisplay-1)				out += '<hr class="youTubeDivider"/>';						//Close the content div			out +=  '</div>';			//Close the video div			out +=  '</div>';			//Output the data            __mainDiv.append(out);            cnt = cnt + 1;        }    });                // Open in new tab?    if (__opts.linksInNewWindow) {        $(__mainDiv).find("li > a").attr("target", "_blank");    }        // Remove the preloader and show the content    $(__preLoaderHTML).remove();    __mainDiv.show();		//Add out scrollbar div's to the container	__containerDiv = $(__opts.containerElement);	var scrollDiv = '<div id="Scrollbar-Container"><div class="Scrollbar-Track"><div class="Scrollbar-Handle"></div></div></div>';	__containerDiv.append(scrollDiv);		//Create a new scrollbar object	var scroller  = new jsScroller(document.getElementById("channel_div"), __containerDiv.width(), __containerDiv.height());	var scrollbar = new jsScrollbar (document.getElementById("Scrollbar-Container"), scroller, false);		}                (function($) {    $.fn.youTubeChannel = function(options) {        var videoDiv = $(this);        $.fn.youTubeChannel.defaults = {            userName: null,            channel: "uploads", //options are favorites or uploads            loadingText: "Loading...",            numberToDisplay: 3,			imageSize: 2,			titleAboveImage: false,             linksInNewWindow: true,            showAuthor: true,			publishDate: true,			dateFormat: 'mm/dd/yyyy',			description: true,			viewCount: false,			stars: false,			time: false        }        __opts = $.extend({}, $.fn.youTubeChannel.defaults, options);        return this.each(function() {            if (__opts.userName != null) {				//Add another wrapper for all videos                videoDiv.append("<div id=\"channel_div\"></div>");                __mainDiv = $("#channel_div");                __mainDiv.hide();                __preLoaderHTML = $("<p class=\"loader\">" +                     __opts.loadingText + "</p>");                videoDiv.append(__preLoaderHTML);                // TODO: Error handling!                $.ajax({                    url: "http://gdata.youtube.com/feeds/base/users/" +                         __opts.userName + "/" + __opts.channel + "?alt=json",                    cache: true,                    dataType: 'jsonp',                                        success: __jQueryYouTubeChannelReceiveData                });            }        });    };})(jQuery);//JS SCROLLBAR! ############################################################################################//Written by Nathan Faubion: http://n-son.com//Use this or edit how you want, just give me//some credit!function jsScrollbar (o, s, a, ev) {	var self = this;		this.reset = function () {		//Arguments that were passed		this._parent = o;		this._src    = s;		this.auto    = a ? a : false;		this.eventHandler = ev ? ev : function () {};		//Component Objects		this._up   = this._findComponent("Scrollbar-Up", this._parent);		this._down = this._findComponent("Scrollbar-Down", this._parent);		this._yTrack  = this._findComponent("Scrollbar-Track", this._parent);		this._yHandle = this._findComponent("Scrollbar-Handle", this._yTrack);		//Height and position properties		this._trackTop = findOffsetTop(this._yTrack);		this._trackHeight  = this._yTrack.offsetHeight;		this._handleHeight = this._yHandle.offsetHeight;		this._x = 0;		this._y = 0;		//Misc. variables		this._scrollDist  = 5;		this._scrollTimer = null;		this._selectFunc  = null;		this._grabPoint   = null;		this._tempTarget  = null;		this._tempDistX   = 0;		this._tempDistY   = 0;		this._disabled    = false;		this._ratio = (this._src.totalHeight - this._src.viewableHeight)/(this._trackHeight - this._handleHeight);				this._yHandle.ondragstart  = function () {return false;};		this._yHandle.onmousedown = function () {return false;};		this._addEvent(this._src.content, "mousewheel", this._scrollbarWheel);		this._removeEvent(this._parent, "mousedown", this._scrollbarClick);		this._addEvent(this._parent, "mousedown", this._scrollbarClick);				this._src.reset();		with (this._yHandle.style) {			top  = "0px";			left = "0px";		}		this._moveContent();				if (this._src.totalHeight < this._src.viewableHeight) {			this._disabled = true;			this._yHandle.style.visibility = "hidden";			if (this.auto) this._parent.style.visibility = "hidden";		} else {			this._disabled = false;			this._yHandle.style.visibility = "visible";			this._parent.style.visibility  = "visible";		}	};	this._addEvent = function (o, t, f) {		if (o.addEventListener) o.addEventListener(t, f, false);		else if (o.attachEvent) o.attachEvent('on'+ t, f);		else o['on'+ t] = f;	};	this._removeEvent = function (o, t, f) {		if (o.removeEventListener) o.removeEventListener(t, f, false);		else if (o.detachEvent) o.detachEvent('on'+ t, f);		else o['on'+ t] = null;	};	this._findComponent = function (c, o) {		var kids = o.childNodes;		for (var i = 0; i < kids.length; i++) {			if (kids[i].className && kids[i].className == c) {				return kids[i];			}		}	};	//Thank you, Quirksmode	function findOffsetTop (o) {		var t = 0;		if (o.offsetParent) {			while (o.offsetParent) {				t += o.offsetTop;				o  = o.offsetParent;			}		}		return t;	};	this._scrollbarClick = function (e) {		if (self._disabled) return false;				e = e ? e : event;		if (!e.target) e.target = e.srcElement;				if (e.target.className.indexOf("Scrollbar-Up") > -1) self._scrollUp(e);		else if (e.target.className.indexOf("Scrollbar-Down") > -1) self._scrollDown(e);		else if (e.target.className.indexOf("Scrollbar-Track") > -1) self._scrollTrack(e);		else if (e.target.className.indexOf("Scrollbar-Handle") > -1) self._scrollHandle(e);				self._tempTarget = e.target;		self._selectFunc = document.onselectstart;		document.onselectstart = function () {return false;};				self.eventHandler(e.target, "mousedown");		self._addEvent(document, "mouseup", self._stopScroll, false);				return false;	};	this._scrollbarDrag = function (e) {		e = e ? e : event;		var t = parseInt(self._yHandle.style.top);		var v = e.clientY + document.body.scrollTop - self._trackTop;		with (self._yHandle.style) {			if (v >= self._trackHeight - self._handleHeight + self._grabPoint)				top = self._trackHeight - self._handleHeight +"px";			else if (v <= self._grabPoint) top = "0px";			else top = v - self._grabPoint +"px";			self._y = parseInt(top);		}				self._moveContent();	};	this._scrollbarWheel = function (e) {		e = e ? e : event;		var dir = 0;		if (e.wheelDelta >= 120) dir = -1;		if (e.wheelDelta <= -120) dir = 1;				self.scrollBy(0, dir * 20);		e.returnValue = false;	};	this._startScroll = function (x, y) {		this._tempDistX = x;		this._tempDistY = y;		this._scrollTimer = window.setInterval(function () {			self.scrollBy(self._tempDistX, self._tempDistY); 		}, 40);	};	this._stopScroll = function () {		self._removeEvent(document, "mousemove", self._scrollbarDrag, false);		self._removeEvent(document, "mouseup", self._stopScroll, false);				if (self._selectFunc) document.onselectstart = self._selectFunc;		else document.onselectstart = function () { return true; };				if (self._scrollTimer) window.clearInterval(self._scrollTimer);		self.eventHandler (self._tempTarget, "mouseup");	};	this._scrollUp = function (e) {this._startScroll(0, -this._scrollDist);};	this._scrollDown = function (e) {this._startScroll(0, this._scrollDist);};	this._scrollTrack = function (e) {		var curY = e.clientY + document.body.scrollTop;		this._scroll(0, curY - this._trackTop - this._handleHeight/2);	};	this._scrollHandle = function (e) {		var curY = e.clientY + document.body.scrollTop;		this._grabPoint = curY - findOffsetTop(this._yHandle);		this._addEvent(document, "mousemove", this._scrollbarDrag, false);	};	this._scroll = function (x, y) {		if (y > this._trackHeight - this._handleHeight) 			y = this._trackHeight - this._handleHeight;		if (y < 0) y = 0;				this._yHandle.style.top = y +"px";		this._y = y;				this._moveContent();	};	this._moveContent = function () {		this._src.scrollTo(0, Math.round(this._y * this._ratio));	};		this.scrollBy = function (x, y) {		this._scroll(0, (-this._src._y + y)/this._ratio);	};	this.scrollTo = function (x, y) {		this._scroll(0, y/this._ratio);	};	this.swapContent = function (o, w, h) {		this._removeEvent(this._src.content, "mousewheel", this._scrollbarWheel, false);		this._src.swapContent(o, w, h);		this.reset();	};		this.reset();};//Written by Nathan Faubion: http://n-son.com//Use this or edit how you want, just give me//some credit!function jsScroller (o, w, h) {	var self = this;	var list = o.getElementsByTagName("div");	for (var i = 0; i < list.length; i++) {		if (list[i].className.indexOf("Scroller-Container") > -1) {			o = list[i];		}	}		//Private methods	this._setPos = function (x, y) {		if (x < this.viewableWidth - this.totalWidth) 			x = this.viewableWidth - this.totalWidth;		if (x > 0) x = 0;		if (y < this.viewableHeight - this.totalHeight) 			y = this.viewableHeight - this.totalHeight;		if (y > 0) y = 0;		this._x = x;		this._y = y;		with (o.style) {			left = this._x +"px";			top  = this._y +"px";		}	};		//Public Methods	this.reset = function () {		this.content = o;		this.totalHeight = o.offsetHeight;		this.totalWidth	 = o.offsetWidth;		this._x = 0;		this._y = 0;		with (o.style) {			left = "0px";			top  = "0px";		}	};	this.scrollBy = function (x, y) {		this._setPos(this._x + x, this._y + y);	};	this.scrollTo = function (x, y) {		this._setPos(-x, -y);	};	this.stopScroll = function () {		if (this.scrollTimer) window.clearInterval(this.scrollTimer);	};	this.startScroll = function (x, y) {		this.stopScroll();		this.scrollTimer = window.setInterval(			function(){ self.scrollBy(x, y); }, 40		);	};	this.swapContent = function (c, w, h) {		o = c;		var list = o.getElementsByTagName("div");		for (var i = 0; i < list.length; i++) {			if (list[i].className.indexOf("Scroller-Container") > -1) {				o = list[i];			}		}		if (w) this.viewableWidth  = w;		if (h) this.viewableHeight = h;		this.reset();	};		//variables	this.content = o;	this.viewableWidth  = w;	this.viewableHeight = h;	this.totalWidth	 = o.offsetWidth;	this.totalHeight = o.offsetHeight;	this.scrollTimer = null;	this.reset();};